From dd347d3ae52461838cb4bb186fe11e63c185f7ce Mon Sep 17 00:00:00 2001
From: Jeffy Chen <jeffy.chen@rock-chips.com>
Date: Tue, 9 Jul 2019 19:51:32 +0800
Subject: [PATCH 06/81] glamor: prepare: Prefer using gbm_bo_map/gbm_bo_unmap

Prefer using gbm_bo_map/gbm_bo_unmap instead of glamor_transfer, to
avoid buffer copying.

Signed-off-by: Jeffy Chen <jeffy.chen@rock-chips.com>
---
 configure.ac              |  3 ++
 glamor/glamor_egl.c       | 34 +++++++++++++--------
 glamor/glamor_egl_stubs.c | 20 +++++++++++++
 glamor/glamor_prepare.c   | 62 ++++++++++++++++++++++++++++++++++-----
 glamor/glamor_prepare.h   |  3 ++
 glamor/glamor_priv.h      |  3 ++
 include/dix-config.h.in   |  3 ++
 7 files changed, 109 insertions(+), 19 deletions(-)

diff --git a/configure.ac b/configure.ac
index 608d354e3..3a32d6994 100644
--- a/configure.ac
+++ b/configure.ac
@@ -2042,6 +2042,9 @@ if test "x$GLAMOR" = xyes; then
 		PKG_CHECK_EXISTS(gbm >= 17.1.0,
 				 [AC_DEFINE(GBM_BO_WITH_MODIFIERS, 1, [Have gbm_bo_create_with_modifiers])],
 				 [])
+		AC_CHECK_HEADER([gbm.h],
+			[AC_CHECK_LIB(gbm, gbm_bo_map,
+				[AC_DEFINE(GLAMOR_HAS_GBM_MAP,1,[Have gbm_bo_map])])])
 	else
 		if test "x$XORG" = xyes; then
 			AC_MSG_ERROR([Glamor for Xorg requires $LIBGBM])
diff --git a/glamor/glamor_egl.c b/glamor/glamor_egl.c
index 4604b571f..10813cbd1 100644
--- a/glamor/glamor_egl.c
+++ b/glamor/glamor_egl.c
@@ -170,6 +170,8 @@ glamor_egl_set_pixmap_bo(PixmapPtr pixmap, struct gbm_bo *bo,
     struct glamor_pixmap_private *pixmap_priv =
         glamor_get_pixmap_private(pixmap);
 
+    glamor_finish_access_pixmap(pixmap, TRUE);
+
     if (pixmap_priv->bo && pixmap_priv->owned_bo)
         gbm_bo_destroy(pixmap_priv->bo);
 
@@ -356,9 +358,11 @@ glamor_make_pixmap_exportable(PixmapPtr pixmap, Bool modifiers_ok)
 
     scratch_gc = GetScratchGC(pixmap->drawable.depth, screen);
     ValidateGC(&pixmap->drawable, scratch_gc);
+    pixmap_priv->exporting = TRUE;
     scratch_gc->ops->CopyArea(&pixmap->drawable, &exported->drawable,
                               scratch_gc,
                               0, 0, width, height, 0, 0);
+    pixmap_priv->exporting = FALSE;
     FreeScratchGC(scratch_gc);
 
     /* Now, swap the tex/gbm/EGLImage/etc. of the exported pixmap into
@@ -732,8 +736,7 @@ glamor_egl_destroy_pixmap(PixmapPtr pixmap)
         struct glamor_pixmap_private *pixmap_priv =
             glamor_get_pixmap_private(pixmap);
 
-        if (pixmap_priv->bo)
-            gbm_bo_destroy(pixmap_priv->bo);
+        glamor_egl_set_pixmap_bo(pixmap, NULL, pixmap_priv->used_modifiers);
     }
 
     screen->DestroyPixmap = glamor_egl->saved_destroy_pixmap;
@@ -747,8 +750,9 @@ glamor_egl_destroy_pixmap(PixmapPtr pixmap)
 _X_EXPORT void
 glamor_egl_exchange_buffers(PixmapPtr front, PixmapPtr back)
 {
-    struct gbm_bo *temp_bo;
-    Bool temp_mod;
+#define GLAMOR_EXCHANGE(a, b) \
+    { typeof(a) __tmp; __tmp = a; a = b; b = __tmp; }
+
     struct glamor_pixmap_private *front_priv =
         glamor_get_pixmap_private(front);
     struct glamor_pixmap_private *back_priv =
@@ -756,12 +760,19 @@ glamor_egl_exchange_buffers(PixmapPtr front, PixmapPtr back)
 
     glamor_pixmap_exchange_fbos(front, back);
 
-    temp_bo = back_priv->bo;
-    temp_mod = back_priv->used_modifiers;
-    back_priv->bo = front_priv->bo;
-    back_priv->used_modifiers = front_priv->used_modifiers;
-    front_priv->bo = temp_bo;
-    front_priv->used_modifiers = temp_mod;
+    glamor_finish_access_pixmap(front, FALSE);
+    glamor_finish_access_pixmap(back, FALSE);
+
+    /* Swap all buffer related members */
+    GLAMOR_EXCHANGE(back_priv->bo, front_priv->bo);
+    GLAMOR_EXCHANGE(back_priv->owned_bo, front_priv->owned_bo);
+    GLAMOR_EXCHANGE(back_priv->used_modifiers, front_priv->used_modifiers);
+    GLAMOR_EXCHANGE(back_priv->bo_mapped, front_priv->bo_mapped);
+    GLAMOR_EXCHANGE(back_priv->map_data, front_priv->map_data);
+    GLAMOR_EXCHANGE(back_priv->gl_synced, front_priv->gl_synced);
+
+    GLAMOR_EXCHANGE(back->devPrivate.ptr, front->devPrivate.ptr);
+    GLAMOR_EXCHANGE(back->devKind, front->devKind);
 
     glamor_set_pixmap_type(front, GLAMOR_TEXTURE_DRM);
     glamor_set_pixmap_type(back, GLAMOR_TEXTURE_DRM);
@@ -780,8 +791,7 @@ glamor_egl_close_screen(ScreenPtr screen)
     screen_pixmap = screen->GetScreenPixmap(screen);
     pixmap_priv = glamor_get_pixmap_private(screen_pixmap);
 
-    gbm_bo_destroy(pixmap_priv->bo);
-    pixmap_priv->bo = NULL;
+    glamor_egl_set_pixmap_bo(screen_pixmap, NULL, pixmap_priv->used_modifiers);
 
     screen->CloseScreen = glamor_egl->saved_close_screen;
 
diff --git a/glamor/glamor_egl_stubs.c b/glamor/glamor_egl_stubs.c
index 91ab9a7ae..19863f556 100644
--- a/glamor/glamor_egl_stubs.c
+++ b/glamor/glamor_egl_stubs.c
@@ -30,6 +30,10 @@
 
 #include "glamor.h"
 
+#ifdef GLAMOR_HAS_GBM_MAP
+#include "gbm.h"
+#endif
+
 void
 glamor_egl_screen_init(ScreenPtr screen, struct glamor_context *glamor_ctx)
 {
@@ -58,3 +62,19 @@ glamor_egl_fd_from_pixmap(ScreenPtr screen, PixmapPtr pixmap,
 {
     return -1;
 }
+
+struct gbm_bo *
+glamor_gbm_bo_from_pixmap(ScreenPtr screen, PixmapPtr pixmap)
+{
+    return NULL;
+}
+
+#ifdef GLAMOR_HAS_GBM_MAP
+__attribute__((weak)) void *
+gbm_bo_map(struct gbm_bo *bo,
+           uint32_t x, uint32_t y, uint32_t width, uint32_t height,
+           uint32_t flags, uint32_t *stride, void **mp_data)
+{
+    return NULL;
+}
+#endif
diff --git a/glamor/glamor_prepare.c b/glamor/glamor_prepare.c
index 835c4ebea..00bfa8895 100644
--- a/glamor/glamor_prepare.c
+++ b/glamor/glamor_prepare.c
@@ -57,7 +57,7 @@ glamor_prep_pixmap_box(PixmapPtr pixmap, glamor_access_t access, BoxPtr box)
          * by a lower level driver
          */
         if (!priv->prepared)
-            return TRUE;
+            goto done;
 
         /* In X, multiple Drawables can be stored in the same Pixmap (such as
          * each individual window in a non-composited screen pixmap, or the
@@ -69,7 +69,7 @@ glamor_prep_pixmap_box(PixmapPtr pixmap, glamor_access_t access, BoxPtr box)
          */
         RegionSubtract(&region, &region, &priv->prepare_region);
         if (!RegionNotEmpty(&region))
-            return TRUE;
+            goto done;
 
         if (access == GLAMOR_ACCESS_RW)
             FatalError("attempt to remap buffer as writable");
@@ -80,8 +80,32 @@ glamor_prep_pixmap_box(PixmapPtr pixmap, glamor_access_t access, BoxPtr box)
             pixmap->devPrivate.ptr = NULL;
         }
     } else {
+#ifdef GLAMOR_HAS_GBM_MAP
+        struct gbm_bo *gbm = NULL;
+        uint32_t stride;
+
         RegionInit(&priv->prepare_region, box, 1);
 
+        if (!priv->exporting)
+            gbm = glamor_gbm_bo_from_pixmap(screen, pixmap);
+
+        if (gbm) {
+            pixmap->devPrivate.ptr =
+                gbm_bo_map(gbm, 0, 0, pixmap->drawable.width,
+                           pixmap->drawable.height,
+                           (access == GLAMOR_ACCESS_RW) ?
+                           GBM_BO_TRANSFER_READ_WRITE : GBM_BO_TRANSFER_READ,
+                           &stride, &priv->map_data);
+
+            if (pixmap->devPrivate.ptr) {
+                pixmap->devKind = stride;
+                priv->bo_mapped = TRUE;
+                priv->map_access = access;
+                goto done;
+            }
+        }
+#endif
+
         if (glamor_priv->has_rw_pbo) {
             if (priv->pbo == 0)
                 glGenBuffers(1, &priv->pbo);
@@ -122,8 +146,6 @@ glamor_prep_pixmap_box(PixmapPtr pixmap, glamor_access_t access, BoxPtr box)
     glamor_download_boxes(pixmap, RegionRects(&region), RegionNumRects(&region),
                           0, 0, 0, 0, pixmap->devPrivate.ptr, pixmap->devKind);
 
-    RegionUninit(&region);
-
     if (priv->pbo) {
         if (priv->map_access == GLAMOR_ACCESS_RW)
             gl_access = GL_READ_WRITE;
@@ -134,6 +156,17 @@ glamor_prep_pixmap_box(PixmapPtr pixmap, glamor_access_t access, BoxPtr box)
         glBindBuffer(GL_PIXEL_PACK_BUFFER, 0);
     }
 
+done:
+    RegionUninit(&region);
+
+    if (priv->bo_mapped) {
+        /* Finish all commands before accessing the buffer */
+        glamor_finish(screen);
+
+        /* No prepared flag for directly mapping */
+        return TRUE;
+    }
+
     priv->prepared = TRUE;
     return TRUE;
 }
@@ -143,14 +176,29 @@ glamor_prep_pixmap_box(PixmapPtr pixmap, glamor_access_t access, BoxPtr box)
  * if we were writing to it and then unbind it to release the memory
  */
 
-static void
-glamor_fini_pixmap(PixmapPtr pixmap)
+void
+glamor_finish_access_pixmap(PixmapPtr pixmap, Bool force)
 {
     glamor_pixmap_private       *priv = glamor_get_pixmap_private(pixmap);
 
     if (!GLAMOR_PIXMAP_PRIV_HAS_FBO(priv))
         return;
 
+#ifdef GLAMOR_HAS_GBM
+    if (priv->bo_mapped) {
+        if (priv->prepared)
+            FatalError("something wrong during buffer mapping");
+
+        /* Delay unmap to finalize when not forced */
+        if (force) {
+            pixmap->devPrivate.ptr = NULL;
+
+            gbm_bo_unmap(priv->bo, priv->map_data);
+            priv->bo_mapped = FALSE;
+        }
+    }
+#endif
+
     if (!priv->prepared)
         return;
 
@@ -216,7 +264,7 @@ glamor_prepare_access_box(DrawablePtr drawable, glamor_access_t access,
 void
 glamor_finish_access(DrawablePtr drawable)
 {
-    glamor_fini_pixmap(glamor_get_drawable_pixmap(drawable));
+    glamor_finish_access_pixmap(glamor_get_drawable_pixmap(drawable), FALSE);
 }
 
 /*
diff --git a/glamor/glamor_prepare.h b/glamor/glamor_prepare.h
index 85fa79574..b69bd86ea 100644
--- a/glamor/glamor_prepare.h
+++ b/glamor/glamor_prepare.h
@@ -49,4 +49,7 @@ glamor_prepare_access_gc(GCPtr gc);
 void
 glamor_finish_access_gc(GCPtr gc);
 
+void
+glamor_finish_access_pixmap(PixmapPtr pixmap, Bool force);
+
 #endif /* _GLAMOR_PREPARE_H_ */
diff --git a/glamor/glamor_priv.h b/glamor/glamor_priv.h
index 95548b1b1..65e29f31f 100644
--- a/glamor/glamor_priv.h
+++ b/glamor/glamor_priv.h
@@ -371,6 +371,9 @@ typedef struct glamor_pixmap_private {
     struct gbm_bo *bo;
     Bool owned_bo;
     Bool used_modifiers;
+    Bool bo_mapped;
+    void *map_data;
+    Bool exporting;
 #endif
     /** block width of this large pixmap. */
     int block_w;
diff --git a/include/dix-config.h.in b/include/dix-config.h.in
index e0c508ca6..eed8b357c 100644
--- a/include/dix-config.h.in
+++ b/include/dix-config.h.in
@@ -470,6 +470,9 @@
 /* Build glamor/gbm has linear support */
 #undef GLAMOR_HAS_GBM_LINEAR
 
+/* Build glamor/gbm has bo_map support */
+#undef GLAMOR_HAS_GBM_MAP
+
 /* Build glamor/gbm has gl fence support */
 #undef GLAMOR_HAS_GL_FENCE
 
-- 
2.38.5

