From ae261f4d680b95dd9428301df0ae281301d48571 Mon Sep 17 00:00:00 2001
From: Jeffy Chen <jeffy.chen@rock-chips.com>
Date: Wed, 24 Jul 2019 17:18:23 +0800
Subject: [PATCH 13/81] modesetting: Support fb flipping mode

Currently the modesetting only do page flipping for present and dri2.

Add fb flipping mode for other cases to avoid tearing.

Use option "FlipFB" to enable it:
1/ "none" - disabled
2/ "transformed" - enable when transformed(e.g. rotated) (default option)
3/ "always" - always trying to enable it

Signed-off-by: Jeffy Chen <jeffy.chen@rock-chips.com>
---
 hw/xfree86/drivers/modesetting/dri2.c         |   3 +-
 hw/xfree86/drivers/modesetting/driver.c       |  53 +-
 hw/xfree86/drivers/modesetting/driver.h       |  16 +-
 .../drivers/modesetting/drmmode_display.c     | 504 +++++++++++++++++-
 .../drivers/modesetting/drmmode_display.h     |  33 ++
 hw/xfree86/drivers/modesetting/pageflip.c     | 124 +++--
 hw/xfree86/drivers/modesetting/present.c      |   4 +-
 7 files changed, 681 insertions(+), 56 deletions(-)

diff --git a/hw/xfree86/drivers/modesetting/dri2.c b/hw/xfree86/drivers/modesetting/dri2.c
index 8d1b742ef..62eca13c9 100644
--- a/hw/xfree86/drivers/modesetting/dri2.c
+++ b/hw/xfree86/drivers/modesetting/dri2.c
@@ -123,7 +123,6 @@ ms_dri2_create_buffer2(ScreenPtr screen, DrawablePtr drawable,
                        unsigned int attachment, unsigned int format)
 {
     ScrnInfoPtr scrn = xf86ScreenToScrn(screen);
-    modesettingPtr ms = modesettingPTR(scrn);
     DRI2Buffer2Ptr buffer;
     PixmapPtr pixmap;
     CARD32 size;
@@ -500,6 +499,7 @@ ms_dri2_schedule_flip(ms_dri2_frame_event_ptr info)
                        ms_dri2_flip_abort,
                        "DRI2-flip")) {
         ms->drmmode.dri2_flipping = TRUE;
+        drmmode_crtc->external_flipped = TRUE;
         return TRUE;
     }
     return FALSE;
@@ -511,7 +511,6 @@ update_front(DrawablePtr draw, DRI2BufferPtr front)
     ScreenPtr screen = draw->pScreen;
     PixmapPtr pixmap = get_drawable_pixmap(draw);
     ms_dri2_buffer_private_ptr priv = front->driverPrivate;
-    modesettingPtr ms = modesettingPTR(xf86ScreenToScrn(screen));
     CARD32 size;
     CARD16 pitch;
     int name;
diff --git a/hw/xfree86/drivers/modesetting/driver.c b/hw/xfree86/drivers/modesetting/driver.c
index cfe9fcd05..8a6b12cf0 100644
--- a/hw/xfree86/drivers/modesetting/driver.c
+++ b/hw/xfree86/drivers/modesetting/driver.c
@@ -145,6 +145,8 @@ static const OptionInfoRec Options[] = {
     {OPTION_VARIABLE_REFRESH, "VariableRefresh", OPTV_BOOLEAN, {0}, FALSE},
     {OPTION_USE_GAMMA_LUT, "UseGammaLUT", OPTV_BOOLEAN, {0}, FALSE},
     {OPTION_ASYNC_FLIP_SECONDARIES, "AsyncFlipSecondaries", OPTV_BOOLEAN, {0}, FALSE},
+    {OPTION_FLIP_FB, "FlipFB", OPTV_STRING, {0}, FALSE},
+    {OPTION_FLIP_FB_RATE, "MaxFlipRate", OPTV_INTEGER, {0}, 0},
     {-1, NULL, OPTV_NONE, {0}, FALSE}
 };
 
@@ -705,6 +707,9 @@ static void
 msBlockHandler(ScreenPtr pScreen, void *timeout)
 {
     modesettingPtr ms = modesettingPTR(xf86ScreenToScrn(pScreen));
+    ScrnInfoPtr pScrn = xf86ScreenToScrn(pScreen);
+    xf86CrtcConfigPtr xf86_config = XF86_CRTC_CONFIG_PTR(pScrn);
+    int c;
 
     pScreen->BlockHandler = ms->BlockHandler;
     pScreen->BlockHandler(pScreen, timeout);
@@ -712,8 +717,22 @@ msBlockHandler(ScreenPtr pScreen, void *timeout)
     pScreen->BlockHandler = msBlockHandler;
     if (pScreen->isGPU && !ms->drmmode.reverse_prime_offload_mode)
         dispatch_secondary_dirty(pScreen);
-    else if (ms->dirty_enabled)
-        dispatch_dirty(pScreen);
+    else {
+        if (ms->dirty_enabled)
+            dispatch_dirty(pScreen);
+
+        for (c = 0; c < xf86_config->num_crtc; c++) {
+            xf86CrtcPtr crtc = xf86_config->crtc[c];
+            drmmode_crtc_private_ptr drmmode_crtc = crtc->driver_private;
+
+            if (!drmmode_crtc || drmmode_flip_fb(crtc, timeout))
+                continue;
+
+            drmmode_crtc->can_flip_fb = FALSE;
+            drmmode_set_desired_modes(pScrn, &ms->drmmode, TRUE, FALSE);
+            break;
+        }
+    }
 
     ms_dirty_update(pScreen, timeout);
 }
@@ -1077,6 +1096,7 @@ PreInit(ScrnInfoPtr pScrn, int flags)
     modesettingPtr ms;
     rgb defaultWeight = { 0, 0, 0 };
     EntityInfoPtr pEnt;
+    const char *str_value;
     uint64_t value = 0;
     int ret;
     int bppflags, connector_count;
@@ -1222,6 +1242,24 @@ PreInit(ScrnInfoPtr pScrn, int flags)
     ms->drmmode.pageflip =
         xf86ReturnOptValBool(ms->drmmode.Options, OPTION_PAGEFLIP, TRUE);
 
+    str_value = xf86GetOptValString(ms->drmmode.Options, OPTION_FLIP_FB);
+    if (!str_value || !strcmp(str_value, "transformed"))
+        ms->drmmode.fb_flip_mode = DRMMODE_FB_FLIP_TRANSFORMED;
+    else if (!strcmp(str_value, "always"))
+        ms->drmmode.fb_flip_mode = DRMMODE_FB_FLIP_ALWAYS;
+    else
+        ms->drmmode.fb_flip_mode = DRMMODE_FB_FLIP_NONE;
+
+    ret = -1;
+    xf86GetOptValInteger(ms->drmmode.Options, OPTION_FLIP_FB_RATE, &ret);
+    ms->drmmode.fb_flip_rate = ret > 0 ? ret : 0;
+
+    if (ms->drmmode.fb_flip_mode != DRMMODE_FB_FLIP_NONE)
+        xf86DrvMsg(pScrn->scrnIndex, X_INFO,
+                   "FlipFB: %s, limited to: %d fps\n",
+                   (ms->drmmode.fb_flip_mode == DRMMODE_FB_FLIP_ALWAYS ?
+                    "Always" : "Transformed"), ms->drmmode.fb_flip_rate ?: -1);
+
     pScrn->capabilities = 0;
     ret = drmGetCap(ms->fd, DRM_CAP_PRIME, &value);
     if (ret == 0) {
@@ -1251,6 +1289,8 @@ PreInit(ScrnInfoPtr pScrn, int flags)
         ms->atomic_modeset = FALSE;
     }
 
+    drmSetClientCap(ms->fd, DRM_CLIENT_CAP_UNIVERSAL_PLANES, 1);
+
     ms->kms_has_modifiers = FALSE;
     ret = drmGetCap(ms->fd, DRM_CAP_ADDFB2_MODIFIERS, &value);
     if (ret == 0 && value != 0)
@@ -2092,6 +2132,15 @@ CloseScreen(ScreenPtr pScreen)
     modesettingPtr ms = modesettingPTR(pScrn);
     modesettingEntPtr ms_ent = ms_ent_priv(pScrn);
 
+    xf86CrtcConfigPtr xf86_config = XF86_CRTC_CONFIG_PTR(pScrn);
+    int c;
+
+    /* HACK: All filters would be reset after screen closed */
+    for (c = 0; c < xf86_config->num_crtc; c++) {
+        xf86CrtcPtr crtc = xf86_config->crtc[c];
+        crtc->transform.filter = NULL;
+    }
+
     /* Clear mask of assigned crtc's in this generation */
     ms_ent->assigned_crtcs = 0;
 
diff --git a/hw/xfree86/drivers/modesetting/driver.h b/hw/xfree86/drivers/modesetting/driver.h
index 71aa8730e..28e261464 100644
--- a/hw/xfree86/drivers/modesetting/driver.h
+++ b/hw/xfree86/drivers/modesetting/driver.h
@@ -61,6 +61,8 @@ typedef enum {
     OPTION_VARIABLE_REFRESH,
     OPTION_USE_GAMMA_LUT,
     OPTION_ASYNC_FLIP_SECONDARIES,
+    OPTION_FLIP_FB,
+    OPTION_FLIP_FB_RATE,
 } modesettingOpts;
 
 typedef struct
@@ -220,8 +222,6 @@ void ms_vblank_close_screen(ScreenPtr screen);
 
 Bool ms_present_screen_init(ScreenPtr screen);
 
-#ifdef GLAMOR_HAS_GBM
-
 typedef void (*ms_pageflip_handler_proc)(modesettingPtr ms,
                                          uint64_t frame,
                                          uint64_t usec,
@@ -229,6 +229,18 @@ typedef void (*ms_pageflip_handler_proc)(modesettingPtr ms,
 
 typedef void (*ms_pageflip_abort_proc)(modesettingPtr ms, void *data);
 
+Bool ms_do_pageflip_bo(ScreenPtr screen,
+                       drmmode_bo *new_front_bo,
+                       void *event,
+                       int ref_crtc_vblank_pipe,
+                       xf86CrtcPtr target_crtc,
+                       Bool async,
+                       ms_pageflip_handler_proc pageflip_handler,
+                       ms_pageflip_abort_proc pageflip_abort,
+                       const char *log_prefix);
+
+#ifdef GLAMOR_HAS_GBM
+
 Bool ms_do_pageflip(ScreenPtr screen,
                     PixmapPtr new_front,
                     void *event,
diff --git a/hw/xfree86/drivers/modesetting/drmmode_display.c b/hw/xfree86/drivers/modesetting/drmmode_display.c
index 4afaf2870..feed1068e 100644
--- a/hw/xfree86/drivers/modesetting/drmmode_display.c
+++ b/hw/xfree86/drivers/modesetting/drmmode_display.c
@@ -34,6 +34,7 @@
 #include <errno.h>
 #include <sys/ioctl.h>
 #include <sys/mman.h>
+#include <sys/time.h>
 #include <unistd.h>
 #include "dumb_bo.h"
 #include "inputstr.h"
@@ -62,6 +63,11 @@ static PixmapPtr drmmode_create_pixmap_header(ScreenPtr pScreen, int width, int
                                               int depth, int bitsPerPixel, int devKind,
                                               void *pPixData);
 
+static void drmmode_destroy_flip_fb(xf86CrtcPtr crtc);
+static Bool drmmode_create_flip_fb(xf86CrtcPtr crtc);
+static Bool drmmode_update_fb(xf86CrtcPtr crtc, drmmode_fb *fb);
+static Bool drmmode_apply_transform(xf86CrtcPtr crtc);
+
 static const struct drm_color_ctm ctm_identity = { {
     1UL << 32, 0, 0,
     0, 1UL << 32, 0,
@@ -650,6 +656,15 @@ drmmode_crtc_get_fb_id(xf86CrtcPtr crtc, uint32_t *fb_id, int *x, int *y)
         *fb_id = drmmode_crtc->rotate_fb_id;
         *x = *y = 0;
     }
+    else if (drmmode_crtc->flip_fb_enabled) {
+        drmmode_fb *fb = &drmmode_crtc->flip_fb[drmmode_crtc->current_fb];
+        if (!drmmode_update_fb(crtc, fb)) {
+            ErrorF("failed to update flip fb\n");
+            return FALSE;
+        }
+        *fb_id = fb->fb_id;
+        *x = *y = 0;
+    }
     else {
         *fb_id = drmmode->fb_id;
         *x = crtc->x;
@@ -811,6 +826,27 @@ drmmode_set_ctm(xf86CrtcPtr crtc, const struct drm_color_ctm *ctm)
     drmModeDestroyPropertyBlob(drmmode->fd, blob_id);
 }
 
+static Bool
+drmmode_crtc_connected(xf86CrtcPtr crtc)
+{
+    xf86CrtcConfigPtr xf86_config = XF86_CRTC_CONFIG_PTR(crtc->scrn);
+    int i;
+
+    for (i = 0; i < xf86_config->num_output; i++) {
+        xf86OutputPtr output = xf86_config->output[i];
+        drmmode_output_private_ptr drmmode_output;
+        drmmode_output = output->driver_private;
+
+        if (output->crtc != crtc)
+            continue;
+
+        if (drmmode_output->status == XF86OutputStatusConnected)
+            return TRUE;
+    }
+
+    return FALSE;
+}
+
 static int
 drmmode_crtc_set_mode(xf86CrtcPtr crtc, Bool test_only)
 {
@@ -934,7 +970,19 @@ drmmode_crtc_flip(xf86CrtcPtr crtc, uint32_t fb_id, uint32_t flags, void *data)
 {
     modesettingPtr ms = modesettingPTR(crtc->scrn);
     drmmode_crtc_private_ptr drmmode_crtc = crtc->driver_private;
-    int ret;
+    int ret, sx, sy, w, h;
+
+    if (fb_id == ms->drmmode.fb_id) {
+        /* screen FB flip */
+        sx = crtc->x;
+        sy = crtc->y;
+    } else {
+        /* single crtc FB flip */
+        sx = sy = 0;
+    }
+
+    w = crtc->mode.HDisplay;
+    h = crtc->mode.VDisplay;
 
     if (ms->atomic_modeset) {
         drmModeAtomicReq *req = drmModeAtomicAlloc();
@@ -942,7 +990,7 @@ drmmode_crtc_flip(xf86CrtcPtr crtc, uint32_t fb_id, uint32_t flags, void *data)
         if (!req)
             return 1;
 
-        ret = plane_add_props(req, crtc, fb_id, crtc->x, crtc->y);
+        ret = plane_add_props(req, crtc, fb_id, sx, sy);
         flags |= DRM_MODE_ATOMIC_NONBLOCK;
         if (ret == 0)
             ret = drmModeAtomicCommit(ms->fd, req, flags, data);
@@ -950,6 +998,12 @@ drmmode_crtc_flip(xf86CrtcPtr crtc, uint32_t fb_id, uint32_t flags, void *data)
         return ret;
     }
 
+    ret = drmModeSetPlane(ms->fd, drmmode_crtc->plane_id,
+                          drmmode_crtc->mode_crtc->crtc_id, fb_id, 0,
+                          0, 0, w, h, sx << 16, sy << 16, w << 16, h << 16);
+    if (ret)
+        return ret;
+
     return drmModePageFlip(ms->fd, drmmode_crtc->mode_crtc->crtc_id,
                            fb_id, flags, data);
 }
@@ -1341,6 +1395,8 @@ drmmode_EnableSharedPixmapFlipping(xf86CrtcPtr crtc, drmmode_ptr drmmode,
                                    PixmapPtr front, PixmapPtr back)
 {
     drmmode_crtc_private_ptr drmmode_crtc = crtc->driver_private;
+    ScrnInfoPtr scrn = crtc->scrn;
+    modesettingPtr ms = modesettingPTR(scrn);
 
     drmmode_crtc->enable_flipping = TRUE;
 
@@ -1361,6 +1417,8 @@ drmmode_EnableSharedPixmapFlipping(xf86CrtcPtr crtc, drmmode_ptr drmmode,
         return FALSE;
     }
 
+    drmmode_set_desired_modes(scrn, &ms->drmmode, TRUE, TRUE);
+
     return TRUE;
 }
 
@@ -1368,6 +1426,8 @@ void
 drmmode_DisableSharedPixmapFlipping(xf86CrtcPtr crtc, drmmode_ptr drmmode)
 {
     drmmode_crtc_private_ptr drmmode_crtc = crtc->driver_private;
+    ScrnInfoPtr scrn = crtc->scrn;
+    modesettingPtr ms = modesettingPTR(scrn);
 
     drmmode_crtc->enable_flipping = FALSE;
 
@@ -1377,6 +1437,8 @@ drmmode_DisableSharedPixmapFlipping(xf86CrtcPtr crtc, drmmode_ptr drmmode)
 
     drmmode_set_target_scanout_pixmap(crtc, NULL,
                                       &drmmode_crtc->prime_pixmap_back);
+
+    drmmode_set_desired_modes(scrn, &ms->drmmode, TRUE, TRUE);
 }
 
 static void
@@ -1575,9 +1637,8 @@ drmmode_set_mode_major(xf86CrtcPtr crtc, DisplayModePtr mode,
         crtc->y = y;
         crtc->rotation = rotation;
 
-        if (!xf86CrtcRotate(crtc)) {
+        if (!drmmode_apply_transform(crtc))
             goto done;
-        }
 
         crtc->funcs->gamma_set(crtc, crtc->gamma_red, crtc->gamma_green,
                                crtc->gamma_blue, crtc->gamma_size);
@@ -2382,6 +2443,11 @@ drmmode_crtc_init(ScrnInfoPtr pScrn, drmmode_ptr drmmode, drmModeResPtr mode_res
     drmmode_crtc->vblank_pipe = drmmode_crtc_vblank_pipe(num);
     xorg_list_init(&drmmode_crtc->mode_list);
 
+    if (drmmode->fb_flip_mode == DRMMODE_FB_FLIP_NONE)
+        drmmode_crtc->can_flip_fb = FALSE;
+    else
+        drmmode_crtc->can_flip_fb = TRUE;
+
     props = drmModeObjectGetProperties(drmmode->fd, mode_res->crtcs[num],
                                        DRM_MODE_OBJECT_CRTC);
     if (!props || !drmmode_prop_info_copy(drmmode_crtc->props, crtc_props,
@@ -3818,7 +3884,7 @@ drmmode_set_desired_modes(ScrnInfoPtr pScrn, drmmode_ptr drmmode, Bool set_hw,
             crtc->rotation = crtc->desiredRotation;
             crtc->x = crtc->desiredX;
             crtc->y = crtc->desiredY;
-            if (!xf86CrtcRotate(crtc))
+            if (!drmmode_apply_transform(crtc))
                 return FALSE;
         }
     }
@@ -4244,6 +4310,7 @@ drmmode_free_bos(ScrnInfoPtr pScrn, drmmode_ptr drmmode)
         drmmode_crtc_private_ptr drmmode_crtc = crtc->driver_private;
 
         dumb_bo_destroy(drmmode->fd, drmmode_crtc->cursor_bo);
+        drmmode_destroy_flip_fb(crtc);
     }
 }
 
@@ -4416,3 +4483,430 @@ miPointerSpriteFuncRec drmmode_sprite_funcs = {
     .DeviceCursorInitialize = drmmode_sprite_device_cursor_initialize,
     .DeviceCursorCleanup = drmmode_sprite_device_cursor_cleanup,
 };
+
+static void
+drmmode_destroy_flip_fb(xf86CrtcPtr crtc)
+{
+    drmmode_crtc_private_ptr drmmode_crtc = crtc->driver_private;
+    drmmode_ptr drmmode = drmmode_crtc->drmmode;
+    int i;
+
+    for (i = 0; i < ARRAY_SIZE(drmmode_crtc->flip_fb); i++) {
+        drmmode_fb *fb = &drmmode_crtc->flip_fb[i];
+
+        if (fb->fb_id)
+            drmModeRmFB(drmmode->fd, fb->fb_id);
+        fb->fb_id = 0;
+
+        drmmode_bo_destroy(drmmode, &fb->bo);
+
+        if (fb->pixmap)
+            fb->pixmap->drawable.pScreen->DestroyPixmap(fb->pixmap);
+        fb->pixmap = NULL;
+
+        if (fb->damage)
+            DamageDestroy(fb->damage);
+        fb->damage = NULL;
+    }
+}
+
+static Bool
+drmmode_create_flip_fb(xf86CrtcPtr crtc)
+{
+    drmmode_crtc_private_ptr drmmode_crtc = crtc->driver_private;
+    drmmode_ptr drmmode = drmmode_crtc->drmmode;
+    int i, width, height, bpp;
+
+    width = crtc->mode.HDisplay;
+    height = crtc->mode.VDisplay;
+    bpp = drmmode->kbpp;
+
+    drmmode_destroy_flip_fb(crtc);
+
+    for (i = 0; i < ARRAY_SIZE(drmmode_crtc->flip_fb); i++) {
+        drmmode_fb *fb = &drmmode_crtc->flip_fb[i];
+
+        if (!drmmode_create_bo(drmmode, &fb->bo, width, height, bpp))
+            goto fail;
+
+        if (drmmode_bo_import(drmmode, &fb->bo, &fb->fb_id) < 0)
+            goto fail;
+    }
+
+    return TRUE;
+
+fail:
+    drmmode_destroy_flip_fb(crtc);
+    return FALSE;
+}
+
+static Bool
+drmmode_apply_transform(xf86CrtcPtr crtc)
+{
+    drmmode_crtc_private_ptr drmmode_crtc = crtc->driver_private;
+    drmmode_ptr drmmode = drmmode_crtc->drmmode;
+    BoxRec box = {
+        .x1 = 0,
+        .y1 = 0,
+        .x2 = crtc->mode.HDisplay,
+        .y2 = crtc->mode.VDisplay,
+    };
+    int w, h;
+
+    /* should always success */
+    xf86CrtcRotate(crtc);
+
+    pixman_f_transform_bounds(&crtc->f_framebuffer_to_crtc, &box);
+    w = box.x2 - box.x1;
+    h = box.y2 - box.y1;
+
+    if ((w == crtc->mode.HDisplay && h == crtc->mode.VDisplay) ||
+        (w == crtc->mode.VDisplay && h == crtc->mode.HDisplay))
+        drmmode_crtc->is_scale = FALSE;
+    else
+        drmmode_crtc->is_scale = TRUE;
+
+    /* fb flipping disabled or doing shared pixmap flipping */
+    if (!drmmode_crtc->can_flip_fb || drmmode_crtc->enable_flipping)
+        goto bail;
+
+    crtc->driverIsPerformingTransform |= XF86DriverTransformOutput;
+
+    /* should always success */
+    xf86CrtcRotate(crtc);
+
+    if (!crtc->transform_in_use) {
+        crtc->driverIsPerformingTransform &= ~XF86DriverTransformOutput;
+
+        if (drmmode->fb_flip_mode == DRMMODE_FB_FLIP_TRANSFORMED)
+            goto bail;
+    }
+
+    if (!drmmode_create_flip_fb(crtc)) {
+        drmmode_crtc->can_flip_fb = FALSE;
+        goto fail;
+    }
+
+    drmmode_crtc->flip_fb_enabled = TRUE;
+
+    return TRUE;
+
+fail:
+    drmmode_crtc->can_flip_fb = FALSE;
+
+bail:
+    drmmode_destroy_flip_fb(crtc);
+    drmmode_crtc->flip_fb_enabled = FALSE;
+
+    crtc->driverIsPerformingTransform &= ~XF86DriverTransformOutput;
+    return xf86CrtcRotate(crtc);
+}
+
+static void
+drmmode_flip_damage_destroy(DamagePtr damage, void *closure)
+{
+    drmmode_fb *fb = closure;
+
+    if (fb->pixmap)
+        fb->pixmap->drawable.pScreen->DestroyPixmap(fb->pixmap);
+    fb->pixmap = NULL;
+
+    fb->damage = NULL;
+}
+
+static RegionPtr
+drmmode_transform_region(xf86CrtcPtr crtc, RegionPtr src)
+{
+#define MS_MAX_NUM_BOX 4
+    RegionPtr region = RegionCreate(NULL, 0);
+    BoxRec rects[MS_MAX_NUM_BOX];
+    BoxPtr box, rect;
+    Bool empty;
+    int n, i;
+
+    if (!RegionNotEmpty(src))
+        return region;
+
+    if (RegionNumRects(src) < MS_MAX_NUM_BOX) {
+        n = RegionNumRects(src);
+        box = RegionRects(src);
+    } else {
+        /* draw the extents rather than small rects */
+        n = 1;
+        box = RegionExtents(src);
+    }
+
+    empty = TRUE;
+    for (i = 0; i < n; i++) {
+        rect = &rects[i];
+
+        rect->x1 = box[i].x1 - crtc->filter_width / 2;
+        rect->x2 = box[i].x2 + crtc->filter_width / 2;
+        rect->y1 = box[i].y1 - crtc->filter_height / 2;
+        rect->y2 = box[i].y2 + crtc->filter_height / 2;
+        pixman_f_transform_bounds(&crtc->f_framebuffer_to_crtc, rect);
+        rect->x1 = max(rect->x1, 0);
+        rect->y1 = max(rect->y1, 0);
+        rect->x2 = min(rect->x2, crtc->mode.HDisplay);
+        rect->y2 = min(rect->y2, crtc->mode.VDisplay);
+
+        if (rect->x1 < rect->x2 && rect->y1 < rect->y2)
+            empty = FALSE;
+    }
+
+    if (empty)
+        return region;
+
+    RegionInitBoxes(region, rects, n);
+    return region;
+}
+
+Bool
+ms_copy_area(PixmapPtr pSrc, PixmapPtr pDst,
+             pixman_f_transform_t *transform, RegionPtr clip)
+{
+    ScreenPtr screen = pSrc->drawable.pScreen;
+    PictFormatPtr format = PictureWindowFormat(screen->root);
+    PicturePtr src = NULL, dst = NULL;
+    pixman_transform_t t;
+    Bool ret = FALSE;
+    BoxPtr box;
+    int n, error;
+
+    src = CreatePicture(None, &pSrc->drawable,
+                        format, 0L, NULL, serverClient, &error);
+    if (!src)
+        return FALSE;
+
+    dst = CreatePicture(None, &pDst->drawable,
+                        format, 0L, NULL, serverClient, &error);
+    if (!dst)
+        goto out;
+
+    if (transform) {
+        if (!pixman_transform_from_pixman_f_transform(&t, transform))
+            goto out;
+
+        error = SetPictureTransform(src, &t);
+        if (error)
+            goto out;
+    }
+
+    box = REGION_RECTS(clip);
+    n = REGION_NUM_RECTS(clip);
+
+    while (n--) {
+        CompositePicture(PictOpSrc,
+                         src, NULL, dst,
+                         box->x1, box->y1, 0, 0, box->x1,
+                         box->y1, box->x2 - box->x1,
+                         box->y2 - box->y1);
+
+        box++;
+    }
+
+    ret = TRUE;
+out:
+    if (src)
+        FreePicture(src, None);
+    if (dst)
+        FreePicture(dst, None);
+
+    return ret;
+}
+
+static Bool
+drmmode_update_fb(xf86CrtcPtr crtc, drmmode_fb *fb)
+{
+    drmmode_crtc_private_ptr drmmode_crtc = crtc->driver_private;
+    ScrnInfoPtr scrn = crtc->scrn;
+    modesettingPtr ms = modesettingPTR(scrn);
+    ScreenPtr screen = xf86ScrnToScreen(scrn);
+    SourceValidateProcPtr SourceValidate = screen->SourceValidate;
+    RegionPtr dirty;
+    Bool ret;
+
+    if (!fb->pixmap) {
+        void *data = drmmode_bo_map(&ms->drmmode, &fb->bo);
+        int pitch = drmmode_bo_get_pitch(&fb->bo);
+        fb->pixmap = drmmode_create_pixmap_header(screen,
+                                                  fb->bo.width,
+                                                  fb->bo.height,
+                                                  scrn->depth,
+                                                  ms->drmmode.kbpp,
+                                                  pitch, data);
+        if (!fb->pixmap)
+            return FALSE;
+
+        if (!drmmode_set_pixmap_bo(&ms->drmmode, fb->pixmap, &fb->bo))
+            return FALSE;
+
+        /* setup a damage to track dirty */
+        fb->damage = DamageCreate(NULL, drmmode_flip_damage_destroy,
+                                  DamageReportNone, TRUE, screen, fb);
+        DamageRegister(&screen->root->drawable, fb->damage);
+
+        fb->need_clear = TRUE;
+    }
+
+    /* scaled screens may not be able to map areas(due to precision) */
+    if (drmmode_crtc->is_scale && drmmode->exa)
+        fb->need_clear = TRUE;
+
+    dirty = NULL;
+    if (fb->need_clear) {
+        BoxRec rect = {
+            .x1 = 0,
+            .y1 = 0,
+            .x2 = crtc->mode.HDisplay,
+            .y2 = crtc->mode.VDisplay,
+        };
+
+        dirty = RegionCreate(&rect, 1);
+    } else {
+        RegionPtr region = DamageRegion(fb->damage);
+
+        dirty = drmmode_transform_region(crtc, region);
+    }
+
+    if (!RegionNotEmpty(dirty)) {
+        ret = TRUE;
+        goto out;
+    }
+
+    screen->SourceValidate = NULL;
+    ret = ms_copy_area(screen->GetScreenPixmap(screen), fb->pixmap,
+                       &crtc->f_crtc_to_framebuffer, dirty);
+    screen->SourceValidate = SourceValidate;
+
+#ifdef GLAMOR_HAS_GBM
+    if (ms->drmmode.glamor)
+        glamor_finish(screen);
+#endif
+
+    fb->need_clear = FALSE;
+    DamageEmpty(fb->damage);
+
+    ret = TRUE;
+out:
+    RegionDestroy(dirty);
+    return ret;
+}
+
+static void
+drmmode_flip_fb_handler(modesettingPtr ms, uint64_t msc,
+                        uint64_t ust, void *data)
+{
+    drmmode_crtc_private_ptr drmmode_crtc = data;
+
+    drmmode_crtc->flipping = FALSE;
+}
+
+static void
+drmmode_flip_fb_abort(modesettingPtr ms, void *data)
+{
+    drmmode_crtc_private_ptr drmmode_crtc = data;
+
+    drmmode_crtc->flipping = FALSE;
+}
+
+Bool
+drmmode_flip_fb(xf86CrtcPtr crtc, int *timeout)
+{
+    drmmode_crtc_private_ptr drmmode_crtc = crtc->driver_private;
+    drmmode_ptr drmmode = drmmode_crtc->drmmode;
+    ScreenPtr screen = xf86ScrnToScreen(drmmode->scrn);
+    drmmode_fb *fb;
+    struct timeval tv;
+    uint64_t now_ms, diff_ms;
+    int next_fb;
+
+    if (!drmmode_crtc || !crtc->active || !drmmode_crtc_connected(crtc) ||
+        drmmode_crtc->dpms_mode != DPMSModeOn || drmmode_crtc->rotate_fb_id)
+        return TRUE;
+
+    if (!drmmode_crtc->flip_fb_enabled)
+        return TRUE;
+
+    gettimeofday(&tv, NULL);
+    now_ms = tv.tv_sec * 1000 + tv.tv_usec / 1000;
+
+    diff_ms = now_ms - drmmode_crtc->flipping_time_ms;
+
+    /* handle flip timeout */
+    if (drmmode_crtc->flipping && diff_ms >= 50) {
+        xf86DrvMsg(drmmode->scrn->scrnIndex, X_WARNING,
+                   "crtc-%d flip timeout!\n", drmmode_crtc->mode_crtc->crtc_id);
+        drmmode_crtc->flipping = FALSE;
+    }
+
+    /* retry later if still flipping */
+    if (drmmode_crtc->flipping ||
+        drmmode->dri2_flipping || drmmode->present_flipping)
+        goto retry;
+
+    if (drmmode_crtc->external_flipped) {
+        /* delay to exit external flip mode */
+        if (diff_ms < 100)
+            goto retry;
+    } else if (drmmode->fb_flip_rate) {
+        /* limit flip rate */
+        if (diff_ms < (1000 / drmmode->fb_flip_rate))
+            goto retry;
+    }
+
+    /* keep the current fb if not dirty */
+    fb = &drmmode_crtc->flip_fb[drmmode_crtc->current_fb];
+    if (fb->damage && !fb->need_clear) {
+        RegionPtr region = DamageRegion(fb->damage);
+        RegionPtr dirty;
+        Bool ret;
+
+        dirty = drmmode_transform_region(crtc, region);
+        if (dirty) {
+            ret = RegionNotEmpty(dirty);
+            RegionDestroy(dirty);
+            if (!ret)
+                return TRUE;
+        }
+    }
+
+    /* switch to the next fb */
+    next_fb = drmmode_crtc->current_fb + 1;
+    next_fb %= ARRAY_SIZE(drmmode_crtc->flip_fb);
+    fb = &drmmode_crtc->flip_fb[next_fb];
+    if (!drmmode_update_fb(crtc, fb)) {
+        xf86DrvMsg(drmmode->scrn->scrnIndex, X_WARNING,
+                   "crtc-%d failed to update fb!\n",
+                   drmmode_crtc->mode_crtc->crtc_id);
+        return FALSE;
+    }
+
+    if (!ms_do_pageflip_bo(screen, &fb->bo, drmmode_crtc,
+                           drmmode_crtc->vblank_pipe, crtc, TRUE,
+                           drmmode_flip_fb_handler, drmmode_flip_fb_abort,
+                           "FlipFB-flip")) {
+        /* HACK: Workaround commit random interrupted case */
+        if (errno != EPERM) {
+            xf86DrvMsg(drmmode->scrn->scrnIndex, X_WARNING,
+                       "crtc-%d failed to flip(%s)!\n",
+                       drmmode_crtc->mode_crtc->crtc_id, strerror(errno));
+            return FALSE;
+        }
+    }
+
+    drmmode_crtc->current_fb = next_fb;
+
+    drmmode_crtc->flipping = TRUE;
+    drmmode_crtc->external_flipped = FALSE;
+
+    /* take out FB syncing time from framerate control */
+    drmmode_crtc->flipping_time_ms = now_ms;
+
+    return TRUE;
+
+retry:
+    if (*timeout)
+        *timeout = 3;
+    return TRUE;
+}
diff --git a/hw/xfree86/drivers/modesetting/drmmode_display.h b/hw/xfree86/drivers/modesetting/drmmode_display.h
index 17ba4e95e..930a8ec12 100644
--- a/hw/xfree86/drivers/modesetting/drmmode_display.h
+++ b/hw/xfree86/drivers/modesetting/drmmode_display.h
@@ -86,6 +86,12 @@ typedef struct {
 #endif
 } drmmode_bo;
 
+enum drmmode_fb_flip_mode {
+    DRMMODE_FB_FLIP_NONE,
+    DRMMODE_FB_FLIP_TRANSFORMED,
+    DRMMODE_FB_FLIP_ALWAYS
+};
+
 typedef struct {
     int fd;
     unsigned fb_id;
@@ -116,6 +122,9 @@ typedef struct {
     void *shadow_fb;
     void *shadow_fb2;
 
+    enum drmmode_fb_flip_mode fb_flip_mode;
+    int fb_flip_rate;
+
     DevPrivateKeyRec pixmapPrivateKeyRec;
     DevScreenPrivateKeyRec spritePrivateKeyRec;
     DevPrivateKeyRec vrrPrivateKeyRec;
@@ -167,6 +176,16 @@ typedef struct {
     uint64_t *modifiers;
 } drmmode_format_rec, *drmmode_format_ptr;
 
+typedef struct {
+    drmmode_bo bo;
+    unsigned fb_id;
+
+    PixmapPtr pixmap;
+    DamagePtr damage;
+
+    Bool need_clear;
+} drmmode_fb;
+
 typedef struct {
     drmmode_ptr drmmode;
     drmModeCrtcPtr mode_crtc;
@@ -186,6 +205,16 @@ typedef struct {
     drmmode_bo rotate_bo;
     unsigned rotate_fb_id;
 
+    /** support fb flipping to avoid tearing */
+    unsigned fb_id;
+    drmmode_fb flip_fb[2];
+    unsigned current_fb;
+    Bool external_flipped; /* dri2 or present flip */
+    uint64_t flipping_time_ms; /* time of the latest fb flipping */
+    Bool can_flip_fb;
+    Bool flip_fb_enabled;
+    Bool flipping;
+
     PixmapPtr prime_pixmap;
     PixmapPtr prime_pixmap_back;
     unsigned prime_pixmap_x;
@@ -209,6 +238,8 @@ typedef struct {
 
     Bool vrr_enabled;
     Bool use_gamma_lut;
+
+    Bool is_scale;
 } drmmode_crtc_private_rec, *drmmode_crtc_private_ptr;
 
 typedef struct {
@@ -315,4 +346,6 @@ int drmmode_crtc_flip(xf86CrtcPtr crtc, uint32_t fb_id, uint32_t flags, void *da
 void drmmode_set_dpms(ScrnInfoPtr scrn, int PowerManagementMode, int flags);
 void drmmode_crtc_set_vrr(xf86CrtcPtr crtc, Bool enabled);
 
+Bool drmmode_flip_fb(xf86CrtcPtr crtc, int *timeout);
+
 #endif
diff --git a/hw/xfree86/drivers/modesetting/pageflip.c b/hw/xfree86/drivers/modesetting/pageflip.c
index fdd740039..97f9fc918 100644
--- a/hw/xfree86/drivers/modesetting/pageflip.c
+++ b/hw/xfree86/drivers/modesetting/pageflip.c
@@ -27,6 +27,8 @@
 #include <xserver_poll.h>
 #include <xf86drm.h>
 
+#include <sys/time.h>
+
 #include "driver.h"
 
 /*
@@ -82,6 +84,7 @@ struct ms_flipdata {
     uint64_t fe_msc;
     uint64_t fe_usec;
     uint32_t old_fb_id;
+    uint32_t *fb_id;
 };
 
 /*
@@ -161,9 +164,9 @@ ms_pageflip_abort(void *data)
 
 static Bool
 do_queue_flip_on_crtc(modesettingPtr ms, xf86CrtcPtr crtc,
-                      uint32_t flags, uint32_t seq)
+                      uint32_t flags, uint32_t seq, unsigned fb_id)
 {
-    return drmmode_crtc_flip(crtc, ms->drmmode.fb_id, flags,
+    return drmmode_crtc_flip(crtc, fb_id, flags,
                              (void *) (uintptr_t) seq);
 }
 
@@ -205,7 +208,7 @@ queue_flip_on_crtc(ScreenPtr screen, xf86CrtcPtr crtc,
     /* take a reference on flipdata for use in flip */
     flipdata->flip_count++;
 
-    while (do_queue_flip_on_crtc(ms, crtc, flags, seq)) {
+    while (do_queue_flip_on_crtc(ms, crtc, flags, seq, *flipdata->fb_id)) {
         /* We may have failed because the event queue was full.  Flush it
          * and retry.  If there was nothing to flush, then we failed for
          * some other reason and should just return an error.
@@ -294,48 +297,40 @@ ms_print_pageflip_error(int screen_index, const char *log_prefix,
     }
 }
 
-
 Bool
-ms_do_pageflip(ScreenPtr screen,
-               PixmapPtr new_front,
-               void *event,
-               int ref_crtc_vblank_pipe,
-               Bool async,
-               ms_pageflip_handler_proc pageflip_handler,
-               ms_pageflip_abort_proc pageflip_abort,
-               const char *log_prefix)
+ms_do_pageflip_bo(ScreenPtr screen,
+                  drmmode_bo *new_front_bo,
+                  void *event,
+                  int ref_crtc_vblank_pipe,
+                  xf86CrtcPtr target_crtc,
+                  Bool async,
+                  ms_pageflip_handler_proc pageflip_handler,
+                  ms_pageflip_abort_proc pageflip_abort,
+                  const char *log_prefix)
 {
-#ifndef GLAMOR_HAS_GBM
-    return FALSE;
-#else
     ScrnInfoPtr scrn = xf86ScreenToScrn(screen);
     modesettingPtr ms = modesettingPTR(scrn);
     xf86CrtcConfigPtr config = XF86_CRTC_CONFIG_PTR(scrn);
-    drmmode_bo new_front_bo;
+    drmmode_crtc_private_ptr drmmode_crtc;
     uint32_t flags;
     int i;
     struct ms_flipdata *flipdata;
-    ms->glamor.block_handler(screen);
-
-    new_front_bo.gbm = ms->glamor.gbm_bo_from_pixmap(screen, new_front);
-    new_front_bo.dumb = NULL;
-
-    if (!new_front_bo.gbm) {
-        xf86DrvMsg(scrn->scrnIndex, X_ERROR,
-                   "%s: Failed to get GBM BO for flip to new front.\n",
-                   log_prefix);
-        return FALSE;
-    }
+    struct timeval tv;
 
     flipdata = calloc(1, sizeof(struct ms_flipdata));
     if (!flipdata) {
-        new_front_bo.gbm = NULL;
-        drmmode_bo_destroy(&ms->drmmode, &new_front_bo);
         xf86DrvMsg(scrn->scrnIndex, X_ERROR,
                    "%s: Failed to allocate flipdata.\n", log_prefix);
         return FALSE;
     }
 
+    if (target_crtc) {
+        drmmode_crtc = target_crtc->driver_private;
+        flipdata->fb_id = &drmmode_crtc->fb_id;
+    } else {
+        flipdata->fb_id = &ms->drmmode.fb_id;
+    }
+
     flipdata->event = event;
     flipdata->screen = screen;
     flipdata->event_handler = pageflip_handler;
@@ -351,12 +346,10 @@ ms_do_pageflip(ScreenPtr screen,
     flipdata->flip_count++;
 
     /* Create a new handle for the back buffer */
-    flipdata->old_fb_id = ms->drmmode.fb_id;
+    flipdata->old_fb_id = *flipdata->fb_id;
 
-    new_front_bo.width = new_front->drawable.width;
-    new_front_bo.height = new_front->drawable.height;
-    if (drmmode_bo_import(&ms->drmmode, &new_front_bo,
-                          &ms->drmmode.fb_id)) {
+    if (drmmode_bo_import(&ms->drmmode, new_front_bo,
+                          flipdata->fb_id)) {
         if (!ms->drmmode.flip_bo_import_failed) {
             xf86DrvMsg(scrn->scrnIndex, X_WARNING, "%s: Import BO failed: %s\n",
                        log_prefix, strerror(errno));
@@ -364,8 +357,7 @@ ms_do_pageflip(ScreenPtr screen,
         }
         goto error_out;
     } else {
-        if (ms->drmmode.flip_bo_import_failed &&
-            new_front != screen->GetScreenPixmap(screen))
+        if (ms->drmmode.flip_bo_import_failed)
             ms->drmmode.flip_bo_import_failed = FALSE;
     }
 
@@ -381,11 +373,14 @@ ms_do_pageflip(ScreenPtr screen,
     for (i = 0; i < config->num_crtc; i++) {
         enum queue_flip_status flip_status;
         xf86CrtcPtr crtc = config->crtc[i];
-        drmmode_crtc_private_ptr drmmode_crtc = crtc->driver_private;
+        drmmode_crtc = crtc->driver_private;
 
         if (!xf86_crtc_on(crtc))
             continue;
 
+        if (target_crtc && crtc != target_crtc)
+            continue;
+
         flags = DRM_MODE_PAGE_FLIP_EVENT;
         if (ms->drmmode.can_async_flip && async)
             flags |= DRM_MODE_PAGE_FLIP_ASYNC;
@@ -427,10 +422,11 @@ ms_do_pageflip(ScreenPtr screen,
             case QUEUE_FLIP_SUCCESS:
                 break;
         }
-    }
 
-    new_front_bo.gbm = NULL;
-    drmmode_bo_destroy(&ms->drmmode, &new_front_bo);
+        gettimeofday(&tv, NULL);
+        drmmode_crtc = crtc->driver_private;
+        drmmode_crtc->flipping_time_ms = tv.tv_sec * 1000 + tv.tv_usec / 1000;
+    }
 
     /*
      * Do we have more than our local reference,
@@ -450,13 +446,11 @@ error_undo:
      * submitted anything
      */
     if (flipdata->flip_count == 1) {
-        drmModeRmFB(ms->fd, ms->drmmode.fb_id);
-        ms->drmmode.fb_id = flipdata->old_fb_id;
+        drmModeRmFB(ms->fd, *flipdata->fb_id);
+        *flipdata->fb_id = flipdata->old_fb_id;
     }
 
 error_out:
-    new_front_bo.gbm = NULL;
-    drmmode_bo_destroy(&ms->drmmode, &new_front_bo);
     /* if only the local reference - free the structure,
      * else drop the local reference and return */
     if (flipdata->flip_count == 1)
@@ -465,6 +459,48 @@ error_out:
         flipdata->flip_count--;
 
     return FALSE;
+}
+
+Bool
+ms_do_pageflip(ScreenPtr screen,
+               PixmapPtr new_front,
+               void *event,
+               int ref_crtc_vblank_pipe,
+               Bool async,
+               ms_pageflip_handler_proc pageflip_handler,
+               ms_pageflip_abort_proc pageflip_abort,
+               const char *log_prefix)
+{
+#ifndef GLAMOR_HAS_GBM
+    return FALSE;
+#else
+    ScrnInfoPtr scrn = xf86ScreenToScrn(screen);
+    modesettingPtr ms = modesettingPTR(scrn);
+    drmmode_bo new_front_bo;
+    Bool ret;
+
+    if (ms->drmmode.glamor)
+        ms->glamor.block_handler(screen);
+
+    new_front_bo.gbm = glamor_gbm_bo_from_pixmap(screen, new_front);
+    new_front_bo.dumb = NULL;
+    new_front_bo.width = new_front->drawable.width;
+    new_front_bo.height = new_front->drawable.height;
+
+    if (!new_front_bo.gbm) {
+        xf86DrvMsg(scrn->scrnIndex, X_ERROR,
+                   "Failed to get GBM bo for flip to new front.\n");
+        return FALSE;
+    }
+
+    ret = ms_do_pageflip_bo(screen, &new_front_bo, event,
+                            ref_crtc_vblank_pipe, NULL, async,
+                            pageflip_handler, pageflip_abort, log_prefix);
+
+    new_front_bo.gbm = NULL;
+    drmmode_bo_destroy(&ms->drmmode, &new_front_bo);
+
+    return ret;
 #endif /* GLAMOR_HAS_GBM */
 }
 
diff --git a/hw/xfree86/drivers/modesetting/present.c b/hw/xfree86/drivers/modesetting/present.c
index ab18cf0ea..63469dabe 100644
--- a/hw/xfree86/drivers/modesetting/present.c
+++ b/hw/xfree86/drivers/modesetting/present.c
@@ -373,8 +373,10 @@ ms_present_flip(RRCrtcPtr crtc,
     ret = ms_do_pageflip(screen, pixmap, event, drmmode_crtc->vblank_pipe, !sync_flip,
                          ms_present_flip_handler, ms_present_flip_abort,
                          "Present-flip");
-    if (ret)
+    if (ret) {
         ms->drmmode.present_flipping = TRUE;
+        drmmode_crtc->external_flipped = TRUE;
+    }
 
     return ret;
 }
-- 
2.38.5

