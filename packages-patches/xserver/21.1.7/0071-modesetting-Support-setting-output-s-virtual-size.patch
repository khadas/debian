From d5ebb1f29072c7a67a01aa909164f32717fc8de7 Mon Sep 17 00:00:00 2001
From: Jeffy Chen <jeffy.chen@rock-chips.com>
Date: Thu, 6 Apr 2023 16:30:43 +0800
Subject: [PATCH 71/81] modesetting: Support setting output's virtual size

This is useful in mirror mode to scale output sizes.

Tested on RK3588 EVB with:
1/ Set virtual size in xorg conf:
Option "VirtualSize" "DSI-1:1920x1080 HDMI-2:1080x1920"
2/ Check output size changed in xrandr

Signed-off-by: Jeffy Chen <jeffy.chen@rock-chips.com>
---
 hw/xfree86/drivers/modesetting/driver.c       |   1 +
 hw/xfree86/drivers/modesetting/driver.h       |   1 +
 .../drivers/modesetting/drmmode_display.c     | 140 ++++++++++++++----
 .../drivers/modesetting/drmmode_display.h     |   3 +
 4 files changed, 115 insertions(+), 30 deletions(-)

diff --git a/hw/xfree86/drivers/modesetting/driver.c b/hw/xfree86/drivers/modesetting/driver.c
index 4926d005a..43d07cae4 100644
--- a/hw/xfree86/drivers/modesetting/driver.c
+++ b/hw/xfree86/drivers/modesetting/driver.c
@@ -164,6 +164,7 @@ static const OptionInfoRec Options[] = {
     {OPTION_NO_EDID, "NoEDID", OPTV_BOOLEAN, {0}, FALSE},
     {OPTION_HOTPLUG_RESET, "HotplugReset", OPTV_BOOLEAN, {0}, FALSE},
     {OPTION_WARM_UP, "WarmUp", OPTV_BOOLEAN, {0}, FALSE},
+    {OPTION_VIRTUAL_SIZE, "VirtualSize", OPTV_STRING, {0}, FALSE},
     {-1, NULL, OPTV_NONE, {0}, FALSE}
 };
 
diff --git a/hw/xfree86/drivers/modesetting/driver.h b/hw/xfree86/drivers/modesetting/driver.h
index 170897631..b0d9522d0 100644
--- a/hw/xfree86/drivers/modesetting/driver.h
+++ b/hw/xfree86/drivers/modesetting/driver.h
@@ -68,6 +68,7 @@ typedef enum {
     OPTION_NO_EDID,
     OPTION_HOTPLUG_RESET,
     OPTION_WARM_UP,
+    OPTION_VIRTUAL_SIZE,
 } modesettingOpts;
 
 typedef struct
diff --git a/hw/xfree86/drivers/modesetting/drmmode_display.c b/hw/xfree86/drivers/modesetting/drmmode_display.c
index bcc5a2f2e..5a294d601 100644
--- a/hw/xfree86/drivers/modesetting/drmmode_display.c
+++ b/hw/xfree86/drivers/modesetting/drmmode_display.c
@@ -445,7 +445,7 @@ drmmode_prop_info_free(drmmode_prop_info_ptr info, int num_props)
 }
 
 static void
-drmmode_ConvertToKMode(ScrnInfoPtr scrn,
+drmmode_ConvertToKMode(xf86CrtcPtr crtc,
                        drmModeModeInfo * kmode, DisplayModePtr mode);
 
 
@@ -591,7 +591,7 @@ crtc_add_dpms_props(drmModeAtomicReq *req, xf86CrtcPtr crtc,
     if (crtc_active) {
         drmModeModeInfo kmode;
 
-        drmmode_ConvertToKMode(crtc->scrn, &kmode, &crtc->mode);
+        drmmode_ConvertToKMode(crtc, &kmode, &crtc->mode);
         ret |= drm_mode_ensure_blob(crtc, kmode);
 
         ret |= crtc_add_prop(req, drmmode_crtc,
@@ -760,7 +760,7 @@ drmmode_output_dpms_atomic(xf86OutputPtr output, int mode)
         drmmode_crtc_private_ptr drmmode_crtc = crtc->driver_private;
         drmModeModeInfo kmode;
 
-        drmmode_ConvertToKMode(crtc->scrn, &kmode, &crtc->mode);
+        drmmode_ConvertToKMode(crtc, &kmode, &crtc->mode);
         ret |= drm_mode_ensure_blob(crtc, kmode);
 
         ret |= connector_add_prop(req, drmmode_output,
@@ -871,46 +871,57 @@ drmmode_crtc_modeset(xf86CrtcPtr crtc, uint32_t fb_id,
     drmmode_crtc_private_ptr drmmode_crtc = crtc->driver_private;
     drmmode_ptr drmmode = drmmode_crtc->drmmode;
     struct dumb_bo *bo = NULL;
-    uint32_t old_fb_id = 0;
-    int ret = -1;
+    uint32_t new_fb_id = 0;
+    int sx, sy, sw, sh, dx, dy, dw, dh;
+    int ret;
+
+    sx = x;
+    sy = y;
+    sw = crtc->mode.HDisplay;
+    sh = crtc->mode.VDisplay;
+    dx = 0;
+    dy = 0;
+    dw = mode->hdisplay;
+    dh = mode->vdisplay;
 
     /* prefer using the original FB */
     ret = drmModeSetCrtc(drmmode->fd, drmmode_crtc->mode_crtc->crtc_id,
                          fb_id, x, y, output_ids, output_count, mode);
     if (!ret)
-        return 0;
+        goto set_plane;
 
     /* fallback to a new dummy FB */
     bo = dumb_bo_create(drmmode->fd, mode->hdisplay, mode->vdisplay,
                         drmmode->kbpp);
     if (!bo)
-        goto err;
+        goto out;
 
     ret = drmModeAddFB(drmmode->fd, mode->hdisplay, mode->vdisplay,
                        drmmode->scrn->depth, drmmode->kbpp,
-                       bo->pitch, bo->handle, &fb_id);
+                       bo->pitch, bo->handle, &new_fb_id);
     if (ret < 0)
-        goto err;
+        goto out;
 
     ret = drmModeSetCrtc(drmmode->fd, drmmode_crtc->mode_crtc->crtc_id,
-                         fb_id, 0, 0, output_ids, output_count, mode);
-    if (ret < 0) {
-        old_fb_id = fb_id;
-        goto err;
-    }
+                         new_fb_id, 0, 0, output_ids, output_count, mode);
+    if (ret < 0)
+        goto out;
 
-    /* update crtc's current fb_id */
-    old_fb_id = drmmode_crtc->fb_id;
-    drmmode_crtc->fb_id = fb_id;
+set_plane:
+    ret = drmModeSetPlane(drmmode->fd, drmmode_crtc->plane_id,
+                          drmmode_crtc->mode_crtc->crtc_id, fb_id, 0,
+                          dx, dy, dw, dh,
+                          sx << 16, sy << 16, sw << 16, sh << 16);
+    if (ret < 0)
+        goto out;
 
     ret = 0;
-err:
+out:
+    if (new_fb_id)
+        drmModeRmFB(drmmode->fd, new_fb_id);
+
     if (bo)
         dumb_bo_destroy(drmmode->fd, bo);
-
-    if (old_fb_id)
-        drmModeRmFB(drmmode->fd, old_fb_id);
-
     return ret;
 }
 
@@ -1022,7 +1033,7 @@ drmmode_crtc_set_mode(xf86CrtcPtr crtc, Bool test_only)
         ctm = &drmmode_output->ctm;
     }
 
-    drmmode_ConvertToKMode(crtc->scrn, &kmode, &crtc->mode);
+    drmmode_ConvertToKMode(crtc, &kmode, &crtc->mode);
 
     ret = drmmode_crtc_modeset(crtc, fb_id, x, y,
                                output_ids, output_count, &kmode);
@@ -1038,7 +1049,10 @@ drmmode_crtc_flip(xf86CrtcPtr crtc, uint32_t fb_id, uint32_t flags, void *data)
 {
     modesettingPtr ms = modesettingPTR(crtc->scrn);
     drmmode_crtc_private_ptr drmmode_crtc = crtc->driver_private;
-    int ret, sx, sy, w, h;
+    int ret, sx, sy, sw, sh, dw, dh;
+    drmModeModeInfo kmode;
+
+    drmmode_ConvertToKMode(crtc, &kmode, &crtc->mode);
 
     if (fb_id == ms->drmmode.fb_id) {
         /* screen FB flip */
@@ -1049,8 +1063,10 @@ drmmode_crtc_flip(xf86CrtcPtr crtc, uint32_t fb_id, uint32_t flags, void *data)
         sx = sy = 0;
     }
 
-    w = crtc->mode.HDisplay;
-    h = crtc->mode.VDisplay;
+    sw = crtc->mode.HDisplay;
+    sh = crtc->mode.VDisplay;
+    dw = kmode.hdisplay;
+    dh = kmode.vdisplay;
 
     if (ms->atomic_modeset) {
         drmModeAtomicReq *req = drmModeAtomicAlloc();
@@ -1068,7 +1084,7 @@ drmmode_crtc_flip(xf86CrtcPtr crtc, uint32_t fb_id, uint32_t flags, void *data)
 
     ret = drmModeSetPlane(ms->fd, drmmode_crtc->plane_id,
                           drmmode_crtc->mode_crtc->crtc_id, fb_id, 0,
-                          0, 0, w, h, sx << 16, sy << 16, w << 16, h << 16);
+                          0, 0, dw, dh, sx << 16, sy << 16, sw << 16, sh << 16);
     if (ret)
         return ret;
 
@@ -1533,9 +1549,12 @@ drmmode_DisableSharedPixmapFlipping(xf86CrtcPtr crtc, drmmode_ptr drmmode)
 }
 
 static void
-drmmode_ConvertFromKMode(ScrnInfoPtr scrn,
+drmmode_ConvertFromKMode(xf86OutputPtr output,
                          drmModeModeInfo * kmode, DisplayModePtr mode)
 {
+    ScrnInfoPtr scrn = output->scrn;
+    drmmode_output_private_ptr drmmode_output = output->driver_private;
+
     memset(mode, 0, sizeof(DisplayModeRec));
     mode->status = MODE_OK;
 
@@ -1561,12 +1580,51 @@ drmmode_ConvertFromKMode(ScrnInfoPtr scrn,
     if (kmode->type & DRM_MODE_TYPE_PREFERRED)
         mode->type |= M_T_PREFERRED;
     xf86SetModeCrtc(mode, scrn->adjustFlags);
+
+    /* HACK: Use virtual size for all modes */
+    if (drmmode_output->virtual_width && drmmode_output->virtual_height) {
+        mode->HDisplay = drmmode_output->virtual_width;
+        mode->VDisplay = drmmode_output->virtual_height;
+    }
 }
 
 static void
-drmmode_ConvertToKMode(ScrnInfoPtr scrn,
+drmmode_ConvertToKMode(xf86CrtcPtr crtc,
                        drmModeModeInfo * kmode, DisplayModePtr mode)
 {
+    xf86CrtcConfigPtr xf86_config = XF86_CRTC_CONFIG_PTR(crtc->scrn);
+    int i, j;
+
+    /* HACK: Convert from virtual size */
+    for (i = 0; i < xf86_config->num_output; i++) {
+        xf86OutputPtr output = xf86_config->output[i];
+        drmmode_output_private_ptr drmmode_output = output->driver_private;
+        drmModeConnectorPtr koutput = drmmode_output->mode_output;
+
+        if (output->crtc != crtc)
+            continue;
+
+        if (!drmmode_output->virtual_width || !drmmode_output->virtual_height)
+            continue;
+
+        /* Search for original mode */
+        for (j = 0; j < koutput->count_modes; j++) {
+            drmModeModeInfoPtr scan = &koutput->modes[j];
+            if (scan->clock == mode->Clock &&
+                scan->hsync_start == mode->HSyncStart &&
+                scan->hsync_end == mode->HSyncEnd &&
+                scan->htotal == mode->HTotal &&
+                scan->hskew == mode->HSkew &&
+                scan->vsync_start == mode->VSyncStart &&
+                scan->vsync_end == mode->VSyncEnd &&
+                scan->vtotal == mode->VTotal &&
+                scan->vscan == mode->VScan) {
+                *kmode = *scan;
+                return;
+            }
+        }
+    }
+
     memset(kmode, 0, sizeof(*kmode));
 
     kmode->clock = mode->Clock;
@@ -1861,6 +1919,12 @@ drmmode_set_cursor_position(xf86CrtcPtr crtc, int x, int y)
 {
     drmmode_crtc_private_ptr drmmode_crtc = crtc->driver_private;
     drmmode_ptr drmmode = drmmode_crtc->drmmode;
+    drmModeModeInfo kmode;
+
+    drmmode_ConvertToKMode(crtc, &kmode, &crtc->mode);
+
+    x = x * kmode.hdisplay / crtc->mode.HDisplay;
+    y = y * kmode.vdisplay / crtc->mode.VDisplay;
 
     drmModeMoveCursor(drmmode->fd, drmmode_crtc->mode_crtc->crtc_id, x, y);
 }
@@ -2997,7 +3061,7 @@ drmmode_output_get_modes(xf86OutputPtr output)
     for (i = 0; i < koutput->count_modes; i++) {
         Mode = xnfalloc(sizeof(DisplayModeRec));
 
-        drmmode_ConvertFromKMode(output->scrn, &koutput->modes[i], Mode);
+        drmmode_ConvertFromKMode(output, &koutput->modes[i], Mode);
         Modes = xf86ModesAdd(Modes, Mode);
 
     }
@@ -3561,6 +3625,22 @@ drmmode_output_init(ScrnInfoPtr pScrn, drmmode_ptr drmmode, drmModeResPtr mode_r
         goto out_free_encoders;
     }
 
+    s = xf86GetOptValString(drmmode->Options, OPTION_VIRTUAL_SIZE);
+    if (s)
+        s = strstr(s, output->name);
+    if (s) {
+        int w, h;
+        if (sscanf(s + strlen(output->name) + 1, "%dx%d", &w, &h) == 2 &&
+            w > 0 && h > 0) {
+            drmmode_output->virtual_width = w;
+            drmmode_output->virtual_height = h;
+            xf86DrvMsg(pScrn->scrnIndex, X_INFO,
+                       "Using virtual size %dx%d for connector: %s\n",
+                       drmmode_output->virtual_width,
+                       drmmode_output->virtual_height, output->name);
+        }
+    }
+
     drmmode_output->output_id = mode_res->connectors[num];
     drmmode_output->mode_output = koutput;
     drmmode_output->mode_encoders = kencoders;
diff --git a/hw/xfree86/drivers/modesetting/drmmode_display.h b/hw/xfree86/drivers/modesetting/drmmode_display.h
index 707b36ffd..a22df1c99 100644
--- a/hw/xfree86/drivers/modesetting/drmmode_display.h
+++ b/hw/xfree86/drivers/modesetting/drmmode_display.h
@@ -284,6 +284,9 @@ typedef struct {
     Atom ctm_atom;
     struct drm_color_ctm ctm;
 
+    int virtual_width;
+    int virtual_height;
+
     xf86OutputStatus status;
 } drmmode_output_private_rec, *drmmode_output_private_ptr;
 
-- 
2.38.5

